// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckerClient is the client API for HealthChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckerClient interface {
	CheckHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCondition, error)
}

type healthCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckerClient(cc grpc.ClientConnInterface) HealthCheckerClient {
	return &healthCheckerClient{cc}
}

func (c *healthCheckerClient) CheckHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCondition, error) {
	out := new(HealthCondition)
	err := c.cc.Invoke(ctx, "/GGargantua.v1.proto.HealthChecker/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckerServer is the server API for HealthChecker service.
// All implementations should embed UnimplementedHealthCheckerServer
// for forward compatibility
type HealthCheckerServer interface {
	CheckHealth(context.Context, *emptypb.Empty) (*HealthCondition, error)
}

// UnimplementedHealthCheckerServer should be embedded to have forward compatible implementations.
type UnimplementedHealthCheckerServer struct {
}

func (UnimplementedHealthCheckerServer) CheckHealth(context.Context, *emptypb.Empty) (*HealthCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}

// UnsafeHealthCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckerServer will
// result in compilation errors.
type UnsafeHealthCheckerServer interface {
	mustEmbedUnimplementedHealthCheckerServer()
}

func RegisterHealthCheckerServer(s grpc.ServiceRegistrar, srv HealthCheckerServer) {
	s.RegisterService(&HealthChecker_ServiceDesc, srv)
}

func _HealthChecker_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckerServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GGargantua.v1.proto.HealthChecker/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckerServer).CheckHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthChecker_ServiceDesc is the grpc.ServiceDesc for HealthChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GGargantua.v1.proto.HealthChecker",
	HandlerType: (*HealthCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _HealthChecker_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health_check.proto",
}
