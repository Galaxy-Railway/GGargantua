// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	CreateAJob(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*JobUuid, error)
	StartAJob(ctx context.Context, in *UpdateJobContent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelAJob(ctx context.Context, in *JobUuid, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetJobResult(ctx context.Context, in *JobUuid, opts ...grpc.CallOption) (*JobResult, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) CreateAJob(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*JobUuid, error) {
	out := new(JobUuid)
	err := c.cc.Invoke(ctx, "/GGargantua.v1.proto.JobService/CreateAJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StartAJob(ctx context.Context, in *UpdateJobContent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GGargantua.v1.proto.JobService/StartAJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CancelAJob(ctx context.Context, in *JobUuid, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GGargantua.v1.proto.JobService/CancelAJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobResult(ctx context.Context, in *JobUuid, opts ...grpc.CallOption) (*JobResult, error) {
	out := new(JobResult)
	err := c.cc.Invoke(ctx, "/GGargantua.v1.proto.JobService/GetJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations should embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	CreateAJob(context.Context, *emptypb.Empty) (*JobUuid, error)
	StartAJob(context.Context, *UpdateJobContent) (*emptypb.Empty, error)
	CancelAJob(context.Context, *JobUuid) (*emptypb.Empty, error)
	GetJobResult(context.Context, *JobUuid) (*JobResult, error)
}

// UnimplementedJobServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) CreateAJob(context.Context, *emptypb.Empty) (*JobUuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAJob not implemented")
}
func (UnimplementedJobServiceServer) StartAJob(context.Context, *UpdateJobContent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAJob not implemented")
}
func (UnimplementedJobServiceServer) CancelAJob(context.Context, *JobUuid) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAJob not implemented")
}
func (UnimplementedJobServiceServer) GetJobResult(context.Context, *JobUuid) (*JobResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobResult not implemented")
}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_CreateAJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateAJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GGargantua.v1.proto.JobService/CreateAJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateAJob(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StartAJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StartAJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GGargantua.v1.proto.JobService/StartAJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StartAJob(ctx, req.(*UpdateJobContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CancelAJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CancelAJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GGargantua.v1.proto.JobService/CancelAJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CancelAJob(ctx, req.(*JobUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GGargantua.v1.proto.JobService/GetJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobResult(ctx, req.(*JobUuid))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GGargantua.v1.proto.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAJob",
			Handler:    _JobService_CreateAJob_Handler,
		},
		{
			MethodName: "StartAJob",
			Handler:    _JobService_StartAJob_Handler,
		},
		{
			MethodName: "CancelAJob",
			Handler:    _JobService_CancelAJob_Handler,
		},
		{
			MethodName: "GetJobResult",
			Handler:    _JobService_GetJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job.proto",
}
